#!/bin/bash

# Twitter Clone Project Maintenance Script
# Run this script regularly to maintain project health

set -e

echo "üöÄ Starting Twitter Clone Project Maintenance..."
echo "=================================================="

# Navigate to project root
cd /Users/garethhallberg/Desktop/twitter-clone-crewai

# Check if we're in the right directory
if [ ! -d "generated_code/backend" ]; then
    echo "‚ùå Error: Not in the correct project directory"
    exit 1
fi

echo "üìÅ Project directory: $(pwd)"
echo ""

# 1. Validate Spring Boot configurations
echo "üîç Step 1: Validating Spring Boot configurations..."
if [ -f "scripts/verify_config_fix.py" ]; then
    python3 scripts/verify_config_fix.py
else
    echo "‚ö†Ô∏è  Configuration validator not found, skipping..."
fi
echo ""

# 2. Clean build directories
echo "üßπ Step 2: Cleaning build directories..."
cd generated_code/backend
./gradlew clean
echo "‚úÖ Build directories cleaned"
echo ""

# 3. Compile all services
echo "üî® Step 3: Compiling all services..."
if ./gradlew compileKotlin --quiet; then
    echo "‚úÖ All services compiled successfully"
else
    echo "‚ùå Compilation failed - check the errors above"
    exit 1
fi
echo ""

# 4. Run unit tests
echo "üß™ Step 4: Running unit tests..."
if ./gradlew test --quiet; then
    echo "‚úÖ All unit tests passed"
else
    echo "‚ö†Ô∏è  Some unit tests failed - check test reports"
fi
echo ""

# 5. Run integration tests specifically
echo "üî¨ Step 5: Running integration tests..."
echo "Testing user-service..."
if ./gradlew :user-service:test --tests '*IntegrationTest*' --quiet; then
    echo "‚úÖ User service integration tests passed"
else
    echo "‚ùå User service integration tests failed"
fi

echo "Testing post-service..."
if ./gradlew :post-service:test --tests '*IntegrationTest*' --quiet; then
    echo "‚úÖ Post service integration tests passed"
else
    echo "‚ùå Post service integration tests failed"
fi
echo ""

# 6. Check for dependency updates (if available)
echo "üì¶ Step 6: Checking for dependency updates..."
if ./gradlew dependencyUpdates --quiet 2>/dev/null; then
    echo "‚úÖ Dependency check completed - review build/dependencyUpdates/report.txt"
else
    echo "‚ÑπÔ∏è  Dependency update plugin not available"
fi
echo ""

# 7. Generate summary
echo "üìä Step 7: Generating maintenance summary..."
cd ../../

# Create maintenance log
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
LOG_FILE="maintenance_log.txt"

echo "=== Maintenance Run: $TIMESTAMP ===" >> $LOG_FILE
echo "‚úÖ Configuration validation completed" >> $LOG_FILE
echo "‚úÖ Build cleanup completed" >> $LOG_FILE
echo "‚úÖ Compilation check completed" >> $LOG_FILE
echo "‚úÖ Tests executed" >> $LOG_FILE
echo "" >> $LOG_FILE

echo "üìù Maintenance log updated: $LOG_FILE"
echo ""

# 8. Quick health check
echo "üè• Step 8: Quick health check..."
SERVICES=("user-service" "post-service" "common")
HEALTHY_SERVICES=0

for service in "${SERVICES[@]}"; do
    if [ -d "generated_code/backend/$service" ]; then
        if [ -f "generated_code/backend/$service/build.gradle.kts" ]; then
            echo "‚úÖ $service: Structure OK"
            ((HEALTHY_SERVICES++))
        else
            echo "‚ùå $service: Missing build configuration"
        fi
    else
        echo "‚ùå $service: Directory not found"
    fi
done

echo ""
echo "=================================================="
echo "üéâ Maintenance Complete!"
echo "=================================================="
echo "Services checked: ${#SERVICES[@]}"
echo "Healthy services: $HEALTHY_SERVICES"
echo "Success rate: $(( HEALTHY_SERVICES * 100 / ${#SERVICES[@]} ))%"

if [ $HEALTHY_SERVICES -eq ${#SERVICES[@]} ]; then
    echo "üü¢ Project Status: HEALTHY"
    exit 0
else
    echo "üü° Project Status: NEEDS ATTENTION"
    exit 1
fi
